#test pre-conditions: run x-code ios emulator (v14.4.2) on mac device
#appium env installed
from appium import webdriver
from app.application import Application
def before_scenario(context, scenario)
    desired_capabilities = {
        "platformName": "Ios"
        "platformVersion": "14.4.2"
        "deviceName": "iPhone emulator"
        "app": "/Users/Home/QA/AppiumClassTests/app_binaries/com.medium.ipa",
}
#rest http listner from appium instance
    context.driver = webdriver.Remote('http:....', desired_capabilities= desired_capabilities)
    context.driver.implicity_wait(5)
    context.app = Application(context.driver)
def after_scenario(context, scenario):
    context.driver.quit()
##############################
from pages.main_page import MainPage
from page.search_page import SearchPage
class Application:
    def __init__(self, driver):
        self.main_page = MainPage(driver)
        self.search_page = SearchPage(driver)
#####################################
""""
Given go to medium mobile site
When click on get started
Then option to sign in with google is available
And verify 'Choose an account' menu upon sign up
""""
@given("Go to medium mobile site")
def medium_url(context)
    context.driver.get("medium.com")
    #context.app.main_page.open_main()
@when("Click on get started")
def click_getStarted(context)
    context.driver.find_element(By.XPATH,"//div[@class='al']//button[@class='bv b bw bx ca cb cc cd ce cf cg bh ch ci cj ck cl cm cn co cp cq']").click()
    #context.app.header.click_search()
@then("Option to sign in with google is available")
        context.driver.find_element(By.XPATH, "//div[@class='mx y']//div[@class='am bq']")[0].click
        #context.app.header.click_sign_up()
@then("Verify {expected_text} menu upon sign up")
def verify_menu(context, expected_text)
    actual_text = context.driver.find_element(By.XPATH, "//h1[@class='ahT6S  y77zqe']").text
    assert actual_text == expected_text, f'Expected {expected_text}, but got {actual_text}'
